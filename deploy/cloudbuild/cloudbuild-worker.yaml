# Cloud Build configuration for LaxAI Training Worker
# Builds GPU-enabled Docker image for Cloud Run Jobs

substitutions:
  # Build-time and deployment substitutions
  _IMAGE: "laxai-worker"
  _REQS: "requirements-gpu.txt"        # Worker needs GPU requirements for training
  _WORKER_SERVICE: "laxai-worker"
  _CLOUD_RUN_REGION: "us-central1"
  _DEPLOY_TO_CLOUD_RUN: "true"       # Set to "true" to auto-deploy worker jobs
  _WORKER_TIMEOUT: "36000"          # Worker timeout in seconds (10 hours)
 

steps:
  # Build the GPU training worker image
  - id: "build-worker-image"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-f"
      - "docker/worker/Dockerfile.worker"
      - "-t"
      - "us-central1-docker.pkg.dev/${PROJECT_ID}/laxai-repo/${_IMAGE}:latest"
      - "--build-arg"
      - "REQS=${_REQS}"
      - "--build-arg"
      - "GOOGLE_CLOUD_PROJECT=${PROJECT_ID}"
      - "."

  # Push the worker image
  - id: "push-worker-image"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "us-central1-docker.pkg.dev/${PROJECT_ID}/laxai-repo/${_IMAGE}:latest"

  # Setup Pub/Sub infrastructure
  - id: "setup-pubsub"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Setting up Pub/Sub infrastructure..."
        
        # Create topic if it doesn't exist
        gcloud pubsub topics create training-jobs || echo "Topic may already exist"
        
        # Create subscription if it doesn't exist
        gcloud pubsub subscriptions create training-jobs-sub \
          --topic=training-jobs \
          --ack-deadline=600 \
          --message-retention-duration=7d || echo "Subscription may already exist"
        
        echo "Pub/Sub setup complete"

  # Deploy Cloud Run Job (optional)
  - id: "deploy-cloud-run-job"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if [[ "${_DEPLOY_TO_CLOUD_RUN}" == "true" ]]; then
          echo "Deploying Cloud Run Job: ${_WORKER_SERVICE}"
          
          # Generate job configuration
          cat > cloud-run-job.yaml << EOF
        apiVersion: run.googleapis.com/v1
        kind: Job
        metadata:
          name: ${_WORKER_SERVICE}
          labels:
            cloud.googleapis.com/location: ${_CLOUD_RUN_REGION}
        spec:
          template:
            spec:
              template:
                spec:
                  restartPolicy: Never
                  taskTimeoutSeconds: "${_WORKER_TIMEOUT}"
                  serviceAccountName: googlebatch@${PROJECT_ID}.iam.gserviceaccount.com
                  containers:
                  - name: training-worker
                    image: us-central1-docker.pkg.dev/${PROJECT_ID}/laxai-repo/${_IMAGE}:latest
                    env:
                    - name: GOOGLE_CLOUD_PROJECT
                      value: "${PROJECT_ID}"
                    - name: TRAINING_JOBS_SUBSCRIPTION
                      value: "training-jobs-sub"
                    - name: FIRESTORE_ENABLED
                      value: "true"
                    - name: WORKER_TIMEOUT
                      value: "${_WORKER_TIMEOUT}"
                    - name: MAX_CONCURRENT_JOBS
                      value: "1"
                    resources:
                      limits:
                        cpu: "4000m"
                        memory: "16Gi"
                        nvidia.com/gpu: "1"
                      requests:
                        cpu: "2000m"
                        memory: "8Gi"
                        nvidia.com/gpu: "1"
                    nodeSelector:
                      run.googleapis.com/accelerator: nvidia-l4
        EOF
          
          # Deploy the job
          gcloud run jobs replace cloud-run-job.yaml --region=${_CLOUD_RUN_REGION}
          
          echo "Cloud Run Job deployed successfully"
        else
          echo "Skipping Cloud Run Job deployment because _DEPLOY_TO_CLOUD_RUN != true"
          echo "To deploy manually, run: ./scripts/deploy-worker.sh"
        fi

images:
  - "us-central1-docker.pkg.dev/${PROJECT_ID}/laxai-repo/${_IMAGE}:latest"

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

timeout: "1800s"
