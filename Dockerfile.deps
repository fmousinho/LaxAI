# Dependency-only Dockerfile (CPU-first, Python 3.12 slim)
# Purpose: build a deps image that contains Python, system libs, and wheels for
# the project's stable dependency set. App code is applied later in a separate
# build that reuses this image.
#


ARG BASE_PYTHON_IMAGE=python:3.12-slim

# Builder: create wheels for requirements
FROM ${BASE_PYTHON_IMAGE} AS builder

# Install build tools
RUN set -eux \
  && apt-get update \
  && apt-get install -y -o APT::Install-Recommends=false --no-install-recommends \
       build-essential \
       ca-certificates \
       git \
       wget \
       gcc \
       g++ \
  && rm -rf /var/lib/apt/lists/*

WORKDIR /src

# Copy requirements directory (builder needs all referenced files, e.g. 
# requirements-base.txt referenced by requirements-cpu.txt)
COPY requirements/ ./requirements/

# Prefer requirements-base.txt + requirements-cpu.txt; otherwise use all requirements/*.txt
RUN set -eux \
  && python -m pip install --upgrade pip wheel setuptools \
  && mkdir -p /wheels /tmp/reqsdir \
  && if [ -f requirements/requirements-cpu.txt ]; then \
      # Copy requirement files so '-r' includes resolve correctly inside the temp dir
      cp requirements/*.txt /tmp/reqsdir/; \
      REQ_DIR=/tmp/reqsdir; \
    else \
      echo "ERROR: requirements/requirements-cpu.txt not found" >&2; \
      exit 1; \
    fi \
  && TORCH_CPU_INDEX="https://download.pytorch.org/whl/cpu" \
  && PIP_NO_CACHE_DIR=1 \
  # Build the PyTorch CPU wheel first so it's available to later installs
  && (PIP_NO_CACHE_DIR=1 pip wheel --no-deps --find-links "$TORCH_CPU_INDEX/torch_stable.html" torch -w /wheels || true) \
  # Build wheels from the copied temp reqsdir and prefer CPU-only PyTorch wheels
  && (cd "$REQ_DIR" && PIP_NO_CACHE_DIR=1 pip wheel --no-deps --find-links "$TORCH_CPU_INDEX/torch_stable.html" -r "requirements-cpu.txt" -w /wheels) \
  && echo "Building wheels from: $REQ_DIR/requirements-cpu.txt" \
  && ls -lah /wheels \
  && rm -rf /tmp/* /var/tmp/* /root/.cache/pip

# Runtime image: small python base with only runtime deps installed from wheels
FROM ${BASE_PYTHON_IMAGE} AS runtime

WORKDIR /app

# Copy wheels from builder and install remaining wheels
COPY --from=builder /wheels /wheels
RUN set -eux \
  && if [ -d /wheels ] && [ "$(ls -A /wheels)" ]; then \
       # Install all wheels without using cache
       for f in /wheels/*.whl; do [ -f "$f" ] && python -m pip install --no-index --no-deps --no-cache-dir "$f"; done; \
     fi \
  && rm -rf /wheels /tmp/* /var/tmp/* /root/.cache/pip

# Common metadata and health
LABEL org.opencontainers.image.title="laxai-deps" \
      org.opencontainers.image.description="Dependency-only image for LaxAI" \
      org.opencontainers.image.licenses=MIT

CMD ["python","-c","print('Deps image ready')"]
